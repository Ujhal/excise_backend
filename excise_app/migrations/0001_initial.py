# Generated by Django 5.1 on 2025-01-28 06:17

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import excise_app.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('State', models.CharField(default='Sikkim', max_length=100)),
                ('StateNameLL', models.CharField(max_length=30, validators=[excise_app.validators.validate_name])),
                ('StateCode', models.IntegerField(default=11, unique=True)),
                ('IsActive', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('site_admin', 'site_admin'), ('1', 'system_admin'), ('2', 'licensee')], max_length=19)),
                ('user_id', models.CharField(max_length=20, null=True, unique=True)),
                ('first_name', models.CharField(max_length=50, validators=[excise_app.validators.validate_name])),
                ('middle_name', models.CharField(max_length=50, null=True, validators=[excise_app.validators.validate_name])),
                ('last_name', models.CharField(max_length=50, validators=[excise_app.validators.validate_name])),
                ('phonenumber', models.CharField(default='9999999999', max_length=10, validators=[excise_app.validators.validate_Numbers])),
                ('district', models.IntegerField(default=117)),
                ('subdivision', models.IntegerField(default=1001)),
                ('address', models.CharField(max_length=70, null=True)),
                ('created_by', models.CharField(max_length=70, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('District', models.CharField(max_length=30, validators=[excise_app.validators.validate_name])),
                ('DistrictNameLL', models.CharField(max_length=30, null=True, validators=[excise_app.validators.validate_name])),
                ('DistrictCode', models.IntegerField(default=117, unique=True)),
                ('IsActive', models.BooleanField(default=True)),
                ('StateCode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='excise_app.state', to_field='StateCode')),
            ],
        ),
        migrations.CreateModel(
            name='Subdivision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SubDivisionName', models.CharField(max_length=30, null=True, validators=[excise_app.validators.validate_name])),
                ('SubDivisionNameLL', models.CharField(max_length=30, null=True, validators=[excise_app.validators.validate_name])),
                ('SubDivisionCode', models.IntegerField(default=1001, unique=True)),
                ('IsActive', models.BooleanField(default=True)),
                ('DistrictCode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subdivisions', to='excise_app.district', to_field='DistrictCode')),
            ],
        ),
    ]
